from pycdft.common.ft import *
from pycdft.common.sample import *


class WfcManager:
    """Helper class to manage a collection of quantities like psi(r) or psi(G).

    The collection can be indexed by either an internal index or a (spin, kpoint, band) index.
    """

    def __init__(self, wfc, transform=lambda f: f):
        self.wfc = wfc
        self.qty = dict()
        self.transform = transform

    def indices(self):
        return self.qty.keys()

    def clear(self):
        self.qty.clear()

    def _get_idx(self, key):
        try:
            idx = int(key)
        except TypeError:
            try:
                ispin = int(key[0])
                ikpt = int(key[1])
                ibnd = int(key[2])
                assert 0 <= ispin <= self.wfc.nspin
                assert 0 <= ikpt <= self.wfc.nkpt
                assert 0 <= ibnd <= self.wfc.nbnd[ispin, ikpt]
            except ValueError:
                raise ValueError("Index must be either internal index or (spin, kpoint, band) index")
            except (AssertionError, IndexError):
                raise IndexError("(spin, kpoint, band) index out of range ({}, {}, {})".format(
                    self.wfc.nspin, self.wfc.nkpt, self.wfc.nbnd
                ))
            idx = self.wfc.skb2idx(ispin, ikpt, ibnd)
        return idx

    def __getitem__(self, key):
        try:
            return self.qty[self._get_idx(key)]
        except KeyError:
            return None

    def __setitem__(self, key, value):
        idx = self._get_idx(key)
        self.qty[idx] = self.transform(value)


class Wavefunction:
    """Container class for Kohn-Sham wavefunction.

    A wavefunction is defined as a collection of KS orbitals, each uniquely labeled by
    three integers: spin (0 or 1), k point index and band index. To facilitate distributed
    storage and access of a wavefunction on multiple processors, each KS orbital is also
    uniquelly labeled by an internal index. Internal index (idx) is generated by following
    pattern:
        for ispin in range(nspin):
            for ikpt in range(nkpt):
                for ibnd in range(nbnd[ispin, ikpt]):
                    idx ++

    Currently, k points are not fully supported.

    Public attributes:
        psi_r: R space KS orbitals defined on a R space grid described by self.wgrid.
        psi_g: G space KS orbitals defined on a G space grid described by self.wgrid.
        psi_ga: G space KS orbitals defined on G vectors described by self.gvecs.

        Above quantities can be accessed like dicts. They can be indexed with either
        an integer (internal index) or a 3-tuple of integers (spin, kpoint, band index).
        After been indexed, the corresponding quantity (numpy array) of a
        specific KS orbital is returned.

        sample (Sample): sample upon which the wavefunction is defined.
        wgrid (FFTGrid): wavefunction grid.
        dgrid (FFTGrid): charge density grid.

        nspin (int): # of spin channel. 1: spin unpolarized; 2: spin polarized.
        nkpt (int): # of k points.
        nbnd (int): # of bands.
        norb (int): total # of orbitals on all spins, kpoints.
        occ (array): occupation numbers. shape: (nspin, nkpt, nbnd).

        gamma (bool): gamma-trick flag. The flag will affect how psig_arr is interpreted.
        gvecs (array): G vectors on which psig is defined. shape: (ng, 3)
        ngvecs (int): # of G vectors.

    Private attributes:
        idx_skb_map (dict): internal index -> (spin, kpoint, band) index map
        skb_idx_map (dict): (spin, kpoint, band) index -> internal index map

        Above maps can be accessed by skb2idx and idx2skb methods.
    """

    def __init__(self, sample: Sample, wgrid, dgrid, nspin, nkpt, nbnd, occ, gamma=True, gvecs=None):

        # define general info
        self.sample = sample
        self.wgrid = wgrid
        self.dgrid = dgrid

        self.nspin = nspin
        self.nkpt = nkpt
        assert self.nkpt == 1, "K points are not supported yet"
        try:
            nbnd_ = int(nbnd)
            # all spin and kpoints share the same nbnd
            self.nbnd = np.ones((self.nspin, self.nkpt), dtype=int) * nbnd_
        except TypeError:
            # every spin and kpoint have its own nbnd
            self.nbnd = np.array(nbnd, dtype=np.int_)
            assert self.nbnd.shape == (self.nspin, self.nkpt)
        if occ.ndim == 1:
            # all spin and kpoints share the same occupation
            self.occ = np.tile(occ, (self.nspin, self.nkpt)).reshape(self.nspin, self.nkpt, -1)
        else:
            # every spin and kpoint have its own occupation
            self.occ = np.zeros((self.nspin, self.nkpt, np.max(self.nbnd)), dtype=int)
            for ispin in range(self.nspin):
                for ikpt in range(self.nkpt):
                    nbnd = self.nbnd[ispin, ikpt]
                    self.occ[ispin, ikpt, 0:nbnd] = occ[ispin, ikpt][0:nbnd]

        self.gamma = gamma
        self.gvecs = gvecs

        # define maps between internal index <-> (spin, kpoint, band) index
        self.idx_skb_map = dict()
        idx = 0
        for ispin, ikpt in np.ndindex(self.nspin, self.nkpt):
            for ibnd in range(self.nbnd[ispin, ikpt]):
                self.idx_skb_map[idx] = (ispin, ikpt, ibnd)
                idx += 1
        self.norb = len(self.idx_skb_map)
        self.skb_idx_map = {
            self.idx_skb_map[idx]: idx
            for idx in range(self.norb)
        }

        # define containers to store collections of psi(r) or psi(G)
        self.psi_ga = WfcManager(self)
        self.psi_g = WfcManager(self)
        self.psi_r = WfcManager(self, transform=self.normalize)

        assert gvecs.shape[1] == 3
        self.gvecs = gvecs
        self.ngvecs = gvecs.shape[0]

    def skb2idx(self, ispin, ikpt, ibnd):
        """Get internal index from (spin, kpoint, band) index."""
        try:
            return self.skb_idx_map[ispin, ikpt, ibnd]
        except KeyError:
            return None

    def idx2skb(self, idx):
        """Get (spin, kpoint, band) index from internal index."""
        return self.idx_skb_map[idx]

    def psiga2psig(self, psig_arr):
        """Match psi(G) defined on self.gvecs to G space grid defined on self.wgrid."""
        if self.gamma:
            psigd = embedd_g(psig_arr, self.gvecs, self.dgrid, fill="xyz")
            psig = ftgg(psigd, self.dgrid, self.wgrid)
        else:
            psigd = embedd_g(psig_arr, self.gvecs, self.dgrid)
            psig = ftgg(psigd, self.dgrid, self.wgrid)
        return psig

    def psiga2psir(self, psigarr, normalize=True):
        """Compute psi(r) from psi(G) defined on self.gvecs."""
        if self.gamma:
            psigd = embedd_g(psigarr, self.gvecs, self.dgrid, fill="yz")
            psig = ftgg(psigd, self.dgrid, self.wgrid, real=True)
            psir = ftgr(psig, self.wgrid, real=True)
        else:
            psigd = embedd_g(psigarr, self.gvecs, self.dgrid)
            psig = ftgg(psigd, self.dgrid, self.wgrid)
            psir = ftgr(psig, self.wgrid)

        if normalize:
            return self.normalize(psir)
        else:
            return psir

    def psig2psir(self, psig, normalize=True):
        """Compute psi(r) from psi(G) defined on selg.wgrid."""
        psir = ftgr(psig, self.wgrid, real=False)
        if normalize:
            return self.normalize(psir)
        else:
            return psir

    def compute_all_psig_from_psiga(self):
        """Match all psi(G) defined on self.gvecs to self.wgrid."""
        for idx in self.psi_ga.indices():
            self.psi_g[idx] = self.psiga2psig(self.psi_ga[idx])

    def compute_all_psir_from_psiga(self):
        """Compute all psi(r) based on psi(G) defined on self.gvecs."""
        for idx in self.psi_ga.indices():
            self.psi_r[idx] = self.psiga2psir(self.psi_ga[idx], normalize=False)

    def compute_all_psir_from_psig(self):
        """Compute all psi(r) based on psi(G) defined on self.wgrid."""
        for idx in self.psi_g.indices():
            self.psi_r[idx] = self.psig2psir(self.psi_g[idx], normalize=False)

    def normalize(self, psir):
        """Normalize psi(r)."""
        assert psir.shape == (self.wgrid.n1, self.wgrid.n2, self.wgrid.n3)
        norm = np.sqrt(np.sum(np.abs(psir) ** 2) * self.sample.omega / self.wgrid.N)
        return psir / norm
